@inject AlarmPP.Web.Services.AppData AppData
@inject IJSRuntime JSRuntime
@inject IMatToaster Toaster
@using ALARm.Core.Report
<table style="height:100%;border-collapse: collapse;">
    <thead style="display:block; height:25px;">
        <tr>
            <th style="border-right: 1px solid grey; width:35px;">N</th>
            <th style="border-right: 1px solid grey; width:35px;">Км</th>
            <th style="border-right: 1px solid grey; width: 35px;">М</th>
            @if (AppData.ShowGaps || AppData.ShowGapsCloseToDangerous)
            {
                <th style="border-right: 1px solid grey; width: 110px;">Отступление</th>
                <th style="border-right: 1px solid grey; width: 90px;">Дополнение</th>
                <th style="border-right: 1px solid grey; width: 125px;">Зазоры</th>
                <th style="border-right: 1px solid grey; width: 125px;">Огр. скор.</th>
                <th style="border-right: 1px solid grey; width: 125px;"></th>
            }
            else if (AppData.ShowBolts)
            {
                <th style="border-right: 1px solid grey; width: 110px;">Накладка</th>
                <th style="border-right: 1px solid grey; width: 90px;">Дополнение</th>
                <th style="border-right: 1px solid grey; width: 125px;">До стыка</th>
                <th style="border-right: 1px solid grey; width: 125px;">После стыка</th>
                <th style="border-right: 1px solid grey; width: 125px;">Огр. скор.</th>
                <th style="border-right: 1px solid grey; width: 125px;"></th>
            }
            else if (AppData.ShowFasteners)
            {
                <th style="border-right: 1px solid grey; width: 110px;">Отступление</th>
                <th style="border-right: 1px solid grey; width: 90px;">Скрепление</th>
                <th style="border-right: 1px solid grey; width: 125px;">Сторона</th>
                <th style="border-right: 1px solid grey; width: 125px;">Балл</th>
                <th style="border-right: 1px solid grey; width: 125px;"></th>

            }
            else if (AppData.ShowDefShpals)
            {
            <th style="border-right: 1px solid grey; width: 110px;">Отступление</th>
            <th style="border-right: 1px solid grey; width: 90px;">Скрепление</th>
            <th style="border-right: 1px solid grey; width: 125px;">Мероприятие</th>
            <th style="border-right: 1px solid grey; width: 125px;">Примечание</th>
            <th style="border-right: 1px solid grey; width: 125px;"></th>
            }
            else if (AppData.ShowPerShpals)
            {
            <th style="border-right: 1px solid grey; width: 110px;">Отступление</th>
            <th style="border-right: 1px solid grey; width: 90px;">Градус</th>
            <th style="border-right: 1px solid grey; width: 125px;">Скрепление</th>
            <th style="border-right: 1px solid grey; width: 125px;">Примечание</th>
            <th style="border-right: 1px solid grey; width: 125px;"></th>
            }
            @*else if (AppData.S3deleted)
        {
            <th style="border-right: 1px solid grey; width: 110px;">Отступление</th>
            <th style="border-right: 1px solid grey; width: 90px;">Градус</th>
            <th style="border-right: 1px solid grey; width: 125px;">Скрепление</th>
            <th style="border-right: 1px solid grey; width: 125px;">Примечание</th>
            <th style="border-right: 1px solid grey; width: 125px;">Балл</th>

        }*@
            else
            {
            <th style="border-right: 1px solid grey; width: 110px;">Отступление</th>
            <th style="border-right: 1px solid grey; width:90px;">Степень</th>
            <th style="border-right: 1px solid grey; width: 125px;">Отклонение</th>
            <th style="border-right: 1px solid grey; width: 125px;">Длина</th>
            <th style="border-right: 1px solid grey; width: 125px;">Ограничение</th>
            <th style="border-right: 1px solid grey; width: 125px;"></th>
            }


        </tr>
    </thead>
    <tbody style="display:block;overflow-x:hidden; overflow-y:scroll; height: calc(100% - (50px));">




        @if (Kilometers != null)
        {
            int currentKMPosition = 0;
            int rowIndex = 1;

            var closeToDanger = new List<string>() { DigressionName.RampNear.Name, DigressionName.IzoGapNear.Name, DigressionName.SpeedUpNear.Name, DigressionName.PatternRetractionNear.Name, DigressionName.LevelReverse.Name, DigressionName.Level150.Name, DigressionName.Level75.Name, DigressionName.GapSimbol.Name };
            var closeToDangerGR = new List<string>() { DigressionName.gr.Name };
            foreach (var kilometer in Kilometers)
            {
                if (kilometer.Digressions != null)
                {
                    foreach (var digression in kilometer.Digressions)
                    {
                        int metre = kilometer.Direction == ALARm.Core.Direction.Direct ? digression.Meter + digression.Length / 2 : kilometer.Length - digression.Meter - digression.Length / 2;
                        int pos = currentKMPosition + metre;
                        int index = rowIndex;
                        if (AppData.ShowDigressions || AppData.ShowCloseToDangerous)
                        {
                            if ((digression.Degree == 4) && (AppData.ShowDangerousDigressions) ||
                                   (digression.Degree == 3) && (AppData.Show3DegreeDigressions) ||
                                   (digression.Degree == 2) && (AppData.Show2DegreeDigressions) ||
                                   (digression.Degree == 1) && (AppData.Show1DegreeDigressions) ||
                                   (closeToDangerGR.Contains(digression.Comment) && AppData.ShowCloseToDangerous))
                            {
                                var color = digression.Degree == 4 ? "red" : digression.Degree == 3 ? "yellow" : digression.Degree == 2 ? "green" : "white";
                                if (closeToDangerGR.Contains(digression.DigName) && AppData.ShowCloseToDangerous)
                                {
                                    color = "red";
                                }
                                <tr style="background:@(CurrentRow == index ? "#75d2ff" : color)" @onmousedown="@(_ => GoToMark(pos, index))">
                                    <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@rowIndex</td>
                                    <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@kilometer.Number</td>
                                    <td style="border-right: 1px solid grey;  width:35px;text-align:right">@digression.Meter</td>
                                    <td style="border-right: 1px solid grey;  width:110px;">@(  digression.DigName != ""  ? digression.DigName : digression.Digression.Name )</td>
                                    <td style="border-right: 1px solid grey;   width:90px; text-align:right">@digression.Degree</td>
                                    <td style="border-right: 1px solid grey; width: 125px;">@digression.Value</td>
                                    <td style="border-right: 1px solid grey; width: 125px;">@digression.Length</td>
                                    @if (digression.Comment != null)
                                    {
                                        <td style="border-right: 1px solid grey; width: 125px;">@(digression.Comment.Contains("гр")? "-/60" : digression.LimitSpeed)</td>
                                    }
                                    else
                                    {
                                        <td style="border-right: 1px solid grey; width: 125px;">@digression.LimitSpeed</td>
                                    }

                                    <td>

                                        <AlarmButton Text="" Symbol="" Tooltip="Удалить" OnClick="() => DeleteClick(digression)"></AlarmButton>
                                        <AlarmButton Text="" Symbol="" Tooltip="Редактировать" OnClick="() => ModifyClick(digression)"></AlarmButton>

                                    </td>

                                </tr>
                                rowIndex++;
                            }
                        }
                    }
                }
                if (kilometer.Gaps != null)
                {
                    kilometer.Gaps = kilometer.Gaps.Where(o => o.Km == kilometer.Number).ToList();
                    foreach (var digression in kilometer.Gaps.Select((value, i) => new { i, value }))
                    {
                        digression.value.Put = kilometer.Track_name;
                        digression.value.Ball = kilometer.Point;
                        digression.value.Pdb_section = kilometer.PdbSection.Count > 0 ? kilometer.PdbSection[0].ToString() : "";
                        digression.value.Date = DateTime.Today.ToShortDateString();
                        digression.value.Direction = (kilometer.Direction == ALARm.Core.Direction.Direct) ? 1 : -1;
                        @*digression.value.Trip_Type = kilometer.Trip.Trip_Type.ToString();*@
                        int metre = kilometer.Direction == ALARm.Core.Direction.Direct ? digression.value.Meter : kilometer.Length - digression.value.Meter;

                        int pos = currentKMPosition + metre;
                        int index = rowIndex;
                        if (AppData.ShowGaps || AppData.ShowGapsCloseToDangerous)
                        {
                            if ((closeToDanger.Contains(digression.value.Otst) && AppData.ShowGapsCloseToDangerous) || AppData.ShowGaps){
                                var color = "lightgray";
                                @if (closeToDanger.Contains(digression.value.Otst))
                                {
                                    color = "red";
                                }
                                <tr style="background:@(CurrentRow == index ? "#75d2ff" : color)" @onmousedown="@(_ => GoToMark(pos, index))">
                                    <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@rowIndex</td>
                                    <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@kilometer.Number</td>
                                    <td style="border-right: 1px solid grey;  width:35px;text-align:right">@digression.value.Meter</td>
                                    <td style="border-right: 1px solid grey;  width:110px;">@digression.value.Otst</td>
                                    <td style="border-right: 1px solid grey;   width:90px; text-align:right"></td>
                                    <td style="border-right: 1px solid grey; width: 125px;">@($"З л:{digression.value.Zazor} З пр:{digression.value.R_zazor}")</td>
                                    <td style="border-right: 1px solid grey; width: 125px;">@("Огр.ск: " + digression.value.Vdop )</td>
                                    <td>
                                        @if (digression.value.IsAdditional > 1)
                                        {
                                            <AlarmButton Text="" Symbol="" Tooltip="Удалить" OnClick="() => DeleteGapClick(digression.value)"></AlarmButton>
                                            <AlarmButton Text="" Symbol="" Tooltip="Редактировать" OnClick="() => ModifyGapClick(digression.value)"></AlarmButton>
                                            <AlarmButton Text="" Symbol="📷" Tooltip="Фото" OnClick="() => GetImageGaps(digression.value, digression.i, 1)"></AlarmButton>
                                        }
                                    </td>
                                </tr>
                                rowIndex++;

                            }


                        }
                    }
                }

                @*if (kilometer.S3deleted != null)
                {
                    //kilometer.S3deleted = kilometer.S3deleted.Where(o => o.Km == kilometer.Number).ToList();

                    foreach (var deleted in kilometer.S3deleted.Select((value, i) => new { i, value }))
                    {
                        int metre = kilometer.Direction == ALARm.Core.Direction.Direct ? deleted.value.Meter : kilometer.Length - deleted.value.Meter;
                        int pos = currentKMPosition + metre;
                        int index = rowIndex;
                        <tr style="background:@(CurrentRow == index ? "#75d2ff" : "lightgray")" @onmousedown="@(_ => GoToMark(pos, index))">
                            <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@kilometer.Number</td>
                            <td style="border-right: 1px solid grey;  width:35px;text-align:right">@deleted.value.Meter</td>
                            <td style="border-right: 1px solid grey;  width:110px;">@deleted.value.Km</td>
                            <td style="border-right: 1px solid grey;   width:90px; text-align:right">@deleted.value.Angle.ToString("0.00")</td>
                            <td style="border-right: 1px solid grey; width: 125px;">@deleted.value.Kmetr</td>
                            <td style="border-right: 1px solid grey; width: 125px;"></td>
                            <td>
                                <AlarmButton Text="" Symbol="" Tooltip="Удалить" OnClick="() => UpdateDigression(ALARm.Core.Report.RdAction.Modify)"></AlarmButton>

                            </td>
                        </tr>
                        rowIndex++;

                    }
                }*@


                if (kilometer.Bolts != null)
                {
                    kilometer.Bolts = kilometer.Bolts.Where(o => o.Km == kilometer.Number).ToList();
                    foreach (var bolt in kilometer.Bolts.Select((value, i) => new { i, value }))
                    {
                        bolt.value.Put = kilometer.Track_name;
                        bolt.value.Pdb_section = kilometer.PdbSection.Count > 0 ? kilometer.PdbSection[0].ToString() : "";
                        bolt.value.Date = DateTime.Today.ToShortDateString();
                        bolt.value.Fragment = kilometer.Sector;
                        bolt.value.Direction_num = (kilometer.Direction == ALARm.Core.Direction.Direct) ? 1 : -1;
                        int metre = kilometer.Direction == ALARm.Core.Direction.Direct ? bolt.value.Meter : kilometer.Length - bolt.value.Meter;
                        int pos = currentKMPosition + metre;
                        int index = rowIndex;
                        if (AppData.ShowBolts)
                        {
                            <tr style="background:@(CurrentRow == index ? "#75d2ff" : "lightgray")" @onmousedown="@(_ => GoToMark(pos, index))">
                                <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@rowIndex</td>
                                <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@kilometer.Number</td>
                                <td style="border-right: 1px solid grey;  width:35px; text-align:right">@bolt.value.Meter</td>
                                <td style="border-right: 1px solid grey;  width:110px;">@bolt.value.Overlay</td>
                                <td style="border-right: 1px solid grey;   width:90px; text-align:right"></td>
                                <td style="border-right: 1px solid grey; width: 125px;">@(bolt.value.Before)</td>
                                <td style="border-right: 1px solid grey; width: 125px;">@(bolt.value.After)</td>
                                <td style="border-right: 1px solid grey; width: 125px;">
                                    @("Огр.ск: " + bolt.value.FullSpeed )
                                </td>
                                <td>
                                    <AlarmButton Text="" Symbol="" Tooltip="Удалить" OnClick="() => DeleteBoltClick(bolt.value)"></AlarmButton>
                                    <AlarmButton Text="" Symbol="" Tooltip="Редактировать" OnClick="() =>  ModifyBoltClick(bolt.value)"></AlarmButton>
                                    <AlarmButton Text="" Symbol="📷" Tooltip="Фото" OnClick="() => GetImageBolts(bolt.value, bolt.i, 2)"></AlarmButton>
                                </td>
                            </tr>
                            rowIndex++;
                        }
                    }
                }

                if (kilometer.Fasteners != null)
                {
                    kilometer.Fasteners = kilometer.Fasteners.Where(o => o.Km == kilometer.Number).ToList();
                    foreach (var fastener in kilometer.Fasteners.Select((value, i) => new { i, value }))
                    {
                        int metre = kilometer.Direction == ALARm.Core.Direction.Direct ? fastener.value.Meter : kilometer.Length - fastener.value.Meter;
                        int pos = currentKMPosition + metre;
                        fastener.value.Direction_num = (kilometer.Direction == ALARm.Core.Direction.Direct) ? 1 : -1;
                        fastener.value.Put = kilometer.Track_name;
                        fastener.value.Fragment = kilometer.Sector;
                        fastener.value.Pdb_section = kilometer.PdbSection.Count > 0 ? kilometer.PdbSection[0].ToString() : "";
                        fastener.value.Date = DateTime.Today.ToShortDateString();
                        int index = rowIndex;
                        if (AppData.ShowFasteners)
                        {
                            <tr style="background:@(CurrentRow == index ? "#75d2ff" : "lightgray")" @onmousedown="@(_ => GoToMark(pos, index))">
                                <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@rowIndex</td>
                                <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@kilometer.Number</td>
                                <td style="border-right: 1px solid grey;  width:35px;text-align:right">@fastener.value.Mtr</td>
                                <td style="border-right: 1px solid grey;  width:110px;">@fastener.value.Otst</td>
                                <td style="border-right: 1px solid grey;   width:90px; text-align:right">@fastener.value.Fastening</td> @*скрепелние*@
                                <td style="border-right: 1px solid grey; width: 125px;">@fastener.value.Threat_id</td>
                                <td style="border-right: 1px solid grey; width: 125px;"></td>
                                <td>
                                    <AlarmButton Text="" Symbol="" Tooltip="Удалить" OnClick="() => DeleteFastenerClick(fastener.value)"></AlarmButton>
                                    <AlarmButton Text="" Symbol="" Tooltip="Редактировать" OnClick="() => ModifyFastenerClick(fastener.value)"></AlarmButton>
                                    <AlarmButton Text="" Symbol="📷" Tooltip="Фото" OnClick="() => GetImageFasteners(fastener.value, fastener.i, 3)"></AlarmButton>
                                </td>
                            </tr>
                            rowIndex++;
                        }
                    }
                }

                if (kilometer.PerShpals != null)
                {
                    kilometer.PerShpals = kilometer.PerShpals.Where(o => o.Km == kilometer.Number).ToList();
                    foreach (var digression in kilometer.PerShpals.Select((value, i) => new { i, value }))
                    {
                        digression.value.Put = kilometer.Track_name;
                        digression.value.Pdb_section = kilometer.PdbSection.Count > 0 ? kilometer.PdbSection[0].ToString() : "";
                        digression.value.Date = DateTime.Today.ToShortDateString();
                        digression.value.Fragment = kilometer.Sector;
                        digression.value.Direction_num = (kilometer.Direction == ALARm.Core.Direction.Direct) ? 1 : -1;
                        int metre = kilometer.Direction == ALARm.Core.Direction.Direct ? digression.value.Meter : kilometer.Length - digression.value.Meter;
                        int pos = currentKMPosition + metre;
                        int index = rowIndex;
                        if (AppData.ShowPerShpals)
                        {
                            <tr style="background:@(CurrentRow == index ? "#75d2ff" : "lightgray")" @onmousedown="@(_ => GoToMark(pos, index))">
                                <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@rowIndex</td>
                                <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@kilometer.Number</td>
                                <td style="border-right: 1px solid grey;  width:35px;text-align:right">@digression.value.Meter</td>
                                <td style="border-right: 1px solid grey;  width:110px;">@digression.value.Otst</td>
                                <td style="border-right: 1px solid grey;   width:90px; text-align:right">@digression.value.Angle.ToString("0.00")</td>
                                <td style="border-right: 1px solid grey; width: 125px;">@digression.value.Fastener</td>
                                <td style="border-right: 1px solid grey; width: 125px;"></td>
                                <td>
                                    <AlarmButton Text="" Symbol="" Tooltip="Удалить" OnClick="() => DeletePerShpalClick(digression.value)"></AlarmButton>
                                    <AlarmButton Text="" Symbol="" Tooltip="Редактировать" OnClick="() => ModifyPerShpalClick(digression.value)"></AlarmButton>
                                    <AlarmButton Text="" Symbol="📷" Tooltip="Фото" OnClick="() => GetImagePerShpals(digression.value, digression.i, 4)"></AlarmButton>
                                </td>
                            </tr>
                            rowIndex++;
                        }
                    }
                }



                if (kilometer.DefShpals != null)
                {
                    kilometer.DefShpals = kilometer.DefShpals.Where(o => o.Km == kilometer.Number).ToList();
                    foreach (var digression in kilometer.DefShpals.Select((value, i) => new { i, value }))
                    {
                        digression.value.Put = kilometer.Track_name;
                        digression.value.Pdb_section = kilometer.PdbSection.Count > 0 ? kilometer.PdbSection[0].ToString() : "";
                        digression.value.Date = DateTime.Today.ToShortDateString();
                        digression.value.Fragment = kilometer.Sector;
                        digression.value.Direction_num = (kilometer.Direction == ALARm.Core.Direction.Direct) ? 1 : -1;
                        int metre = kilometer.Direction == ALARm.Core.Direction.Direct ? digression.value.Meter : kilometer.Length - digression.value.Meter;
                        int pos = currentKMPosition + metre;
                        int index = rowIndex;
                        if (AppData.ShowDefShpals)
                        {
                            <tr style="background:@(CurrentRow == index ? "#75d2ff" : "lightgray")" @onmousedown="@(_ => GoToMark(pos, index))">
                                <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@rowIndex</td>
                                <td style="border-right: 1px solid grey; text-align: right; width: 35px;">@kilometer.Number</td>
                                <td style="border-right: 1px solid grey;  width:35px; text-align:right">@digression.value.Meter</td>
                                <td style="border-right: 1px solid grey;  width:110px; text-align:right">@digression.value.Otst</td>
                                <td style="border-right: 1px solid grey;   width:90px; text-align:right">@digression.value.Fastening</td>
                                <td style="border-right: 1px solid grey;  width: 125px; text-align:right">@digression.value.Meropr</td>
                                <td style="border-right: 1px solid grey; width: 125px;">@digression.value.Notice</td>
                                <td>
                                    <AlarmButton Text="" Symbol="" Tooltip="Удалить" OnClick="() => DeleteDefShpalClick(digression.value)"></AlarmButton>
                                    <AlarmButton Text="" Symbol="" Tooltip="Редактировать" OnClick="() => ModifyDefShpalClick(digression.value)"></AlarmButton>
                                    <AlarmButton Text="" Symbol="📷" Tooltip="Фото" OnClick="() => GetImageDefShpals(digression.value, digression.i, 5)"></AlarmButton>
                                </td>
                            </tr>
                            rowIndex++;
                        }
                    }
                }
                currentKMPosition = currentKMPosition + kilometer.GetLength();
            }
        }
    </tbody>
</table>

<MatDialog @bind-IsOpen="@DigressionDeleteDialog" Stacked="true">
    <MatDialogTitle>Удаление отступления</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:90%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина удаления" Style="width:90%" Outlined="true"></MatAutocompleteList>
        @code
        {
            string[] options = new[]
            {
                "Решение ПС",
                "Сбой оборудования",
                "Засветка и шумы"
            };
        }

    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {UpdateDigression(ALARm.Core.Report.RdAction.Delete);  }">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { DigressionDeleteDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@DigressionEditDialog" Stacked="true">
    <MatDialogTitle>Корректировка отступления</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:45%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
        <MatTextField @bind-Value="digression.DigName" Label="Отступление" ReadOnly="true" Style="width:45%" Outlined="true"></MatTextField>
        <MatNumericUpDownField ReadOnly="true" @bind-Value="digression.Degree" Label="Степень" Style="width:45%" TextArea="true" Outlined="true" Minimum="1" Maximum="4"></MatNumericUpDownField>
        <MatNumericUpDownField ReadOnly="true" @bind-Value="digression.Value" Label="Значение" Style="width:45%" TextArea="true" Outlined="true"></MatNumericUpDownField>
        <MatNumericUpDownField ReadOnly="true" @bind-Value="digression.Length" Label="Длина" Style="width:45%" TextArea="true" Outlined="true"></MatNumericUpDownField>
        <MatTextField @bind-Value="digression.PassengerSpeedLimit" Label="Огр.ск.пасс.(-1 если нет огр.)" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>
        <MatTextField @bind-Value="digression.FreightSpeedLimit" Label="Огр.ск.груз.(-1 если нет огр.)" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {UpdateDigression(ALARm.Core.Report.RdAction.Modify);  }">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { DigressionEditDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@GapDeleteDialog" Stacked="true">
    <MatDialogTitle>Удаление стыкового зазора</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@GapEditor" Label="Редактор" Style="width:90%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@GapEditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {UpdateGap(ALARm.Core.Report.RdAction.Delete);  }">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { GapDeleteDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@GapEditDialog" Stacked="true">
    <MatDialogTitle>Корректировка стыкового зазора</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@GapEditor" Label="Редактор" Style="width:45%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@GapEditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
        <MatTextField @bind-Value="digressionGap.Otst" Label="Отступление" ReadOnly="true" Style="width:45%" Outlined="true"></MatTextField>
        <MatNumericUpDownField @bind-Value="digressionGap.Zazor" Label="Зазор левый" Style="width:45%" TextArea="true" Outlined="true"></MatNumericUpDownField>
        <MatNumericUpDownField @bind-Value="digressionGap.R_zazor" Label="Зазор правый" Style="width:45%" TextArea="true" Outlined="true"></MatNumericUpDownField>
        <MatNumericUpDownField @bind-Value="digressionGap.Zabeg" Label="Забег" Style="width:45%" TextArea="true" Outlined="true"></MatNumericUpDownField>
        <MatTextField @bind-Value="digressionGap.AllowSpeed" Label="Огр.скор:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {UpdateGap(ALARm.Core.Report.RdAction.Modify);  }">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { GapEditDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@BoltDeleteDialog" Stacked="true">
    <MatDialogTitle>Удаление Болта</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:90%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=>  { EditDigression(ALARm.Core.Report.RdAction.Delete, 2, BoltDeleteDialog); }">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { BoltDeleteDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@BoltEditDialog" Stacked="true">
    <MatDialogTitle>Корректировка болта</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:45%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
        <MatTextField @bind-Value="digressionO.Overlay" Label="Накладка" Style="width:45%" Outlined="true"></MatTextField>
        <MatTextField @bind-Value="digressionO.Before" Label="До стыка:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>
        <MatTextField @bind-Value="digressionO.After" Label="После стыка:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>
        <MatTextField @bind-Value="digressionO.FullSpeed" Label="Огр.ск:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> { EditDigression(ALARm.Core.Report.RdAction.Modify, 2, BoltEditDialog); }">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { BoltEditDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@FastenerDeleteDialog" Stacked="true">
    <MatDialogTitle>Удаление скрепления</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:90%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=>  {EditDigression(ALARm.Core.Report.RdAction.Delete, 3, FastenerDeleteDialog);}">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { FastenerDeleteDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@FastenerEditDialog" Stacked="true">
    <MatDialogTitle>Корректировка скрепления</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:45%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
        <MatTextField @bind-Value="digressionO.Otst" Label="Отступление" Style="width:45%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options2" TItem="string" @bind-Value="digressionO.Threat_id" Label="Сторона" Style="width:45%" Outlined="true"></MatAutocompleteList>
        @code
        {
            string[] options2 = new[]
            {
                "правая",
                "левая"
            };
        }
        <MatTextField @bind-Value="digressionO.Fastening" Label="Скрепление" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {EditDigression(ALARm.Core.Report.RdAction.Modify, 3, FastenerEditDialog);}">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { FastenerEditDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@PerShpalDeleteDialog" Stacked="true">
    <MatDialogTitle>Удаление перпендикулярной шпалы</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:90%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {EditDigression(ALARm.Core.Report.RdAction.Delete, 4, PerShpalDeleteDialog);}">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { PerShpalDeleteDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@PerShpalEditDialog" Stacked="true">
    <MatDialogTitle>Корректировка перпендикулярной шпалы</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:45%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
        <MatTextField @bind-Value="digressionO.Angle" Label="Угол:" Style="width:45%" Outlined="true"></MatTextField>
        <MatTextField @bind-Value="digressionO.Fastener" Label="Скрепление:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>
        @*        <MatTextField @bind-Value="PerShpal.Vdop" Label="Огр.ск:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>
        *@
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {EditDigression(ALARm.Core.Report.RdAction.Modify, 4, PerShpalEditDialog);  }">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { PerShpalEditDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@DefShpalDeleteDialog" Stacked="true">
    <MatDialogTitle>Удаление дефектной шпалы</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:90%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {EditDigression(ALARm.Core.Report.RdAction.Delete, 5, DefShpalDeleteDialog);}">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { DefShpalDeleteDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@DefShpalEditDialog" Stacked="true">
    <MatDialogTitle>Корректировка дефектной шпалы</MatDialogTitle>
    <MatDialogContent>
        <br />
        <MatTextField @bind-Value="@DigressionEditor" Label="Редактор" Style="width:45%" Outlined="true"></MatTextField>
        <MatAutocompleteList Items="@options" TItem="string" @bind-Value="@EditReason" Label="Причина корректировки" Style="width:45%" Outlined="true"></MatAutocompleteList>
        <MatTextField @bind-Value="digressionO.Otst" Label="Отступление:" Style="width:45%" Outlined="true"></MatTextField>
        <MatTextField @bind-Value="digressionO.Fastening" Label="Скрепление:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>
        <MatTextField @bind-Value="digressionO.Meropr" Label="Мероприятие:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>
        @*        <MatTextField @bind-Value="PerShpal.Vdop" Label="Огр.ск:" Style="width:45%" TextArea="true" Outlined="true"></MatTextField>
        *@
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" Style="margin-right:5px;" OnClick="_=> {EditDigression(ALARm.Core.Report.RdAction.Modify, 5, DefShpalEditDialog);  }">Ок</MatButton>
        <MatButton Raised="true" OnClick="_=> { DefShpalEditDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@DigressionImageDialog" Stacked="true" Class="image-modal">
    <MatDialogTitle>Фото</MatDialogTitle>
    <MatDialogContent>
        @*vot tut*@

        @if (AppData.ShowGaps)
        {
            <div align="center">
                <table style="font-size: 16px; font-family: 'Times New Roman'; width: 100%; margin: auto;margin-bottom:8px;border-collapse: collapse">
                    <tr>
                        <td align="left">@digressionGap.Pdb_section</td>
                        <td align="left">@digressionGap.Fragment</td>
                        <td>
                            Дата проверки:
                            <b>@digressionGap.Date</b>
                        </td>
                        <td>Проверка: Дополнительная</td>

                    </tr>
                    <tr>

                        <td>
                            Путь:
                            <b>@digressionGap.Put</b>
                        </td>
                        <td>
                            Км:
                            <b>@digressionGap.Km</b>
                        </td>
                        <td>
                            Метр:
                            <b>@digressionGap.Meter</b>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label>Левый стыковой зазор</label>
                    <p id="origin_l_zazor">@digressionGap.Zazor</p>
                    <p id="zazor_l" style="display: none;"></p>
                </div>
                <div class="col-md-4">
                    <label>Забег</label>
                    <p id="origin_zabeg">@digressionGap.Zabeg</p>
                    <p id="zabeg" style="display: none;"></p>
                </div>
                <div class="col-md-4">
                    <label>Правый стыковой зазор</label>
                    <p id="origin_r_zazor">@digressionGap.R_zazor</p>
                    <p id="zazor_r" style="display: none;"></p>
                </div>
                <div class="col-md-4">
                    <label>Балл</label>
                    <p id="origin_ball">@digressionGap.Ball</p>
                    @*<p id="zazor_r" style="display: none;"></p>*@
                </div>
            </div>
        }

        @if (AppData.ShowBolts)
        {
            <div align="center">
                <table style="font-size: 16px; font-family: 'Times New Roman'; width: 100%; margin: auto;margin-bottom:8px;border-collapse: collapse">
                    <tr>
                        <td align="left">@digressionO.Pdb_section</td>
                        <td align="left">@digressionO.Fragment</td>
                        <td>
                            Дата проверки:
                            <b>@digressionO.Date</b>
                        </td>
                        <td>Проверка: Дополнительная</td>

                    </tr>
                    <tr>
                        <td>
                            Путь:
                            <b>@digressionO.Put</b>
                        </td>
                        <td>
                            Км:
                            <b>@digressionO.Km</b>
                        </td>
                        <td align="left">
                            Метр:
                            <b>@digressionO.Meter</b>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Накладка:
                            <b>@digressionO.Overlay</b>
                        </td>
                        <td>
                            До стыка:
                            <b>@digressionO.Before</b>
                        </td>
                        <td>
                            После стыка:
                            <b>@digressionO.After</b>
                        </td>
                    </tr>
                </table>
            </div>
        }

        @if (AppData.ShowFasteners)
        {
            <div align="center">
                <table style="font-size: 16px; font-family: 'Times New Roman'; width: 100%; margin: auto;margin-bottom:8px;border-collapse: collapse">
                    <tr>
                        <td align="left">@digressionO.Pdb_section</td>
                        <td align="left">@digressionO.Fragment</td>
                        <td>
                            Дата проверки:
                            <b>@digressionO.Date</b>
                        </td>
                        <td>Проверка: Дополнительная</td>

                    </tr>
                    <tr>
                        <td>
                            Путь:
                            <b>@digressionO.Put</b>
                        </td>
                        <td>
                            Км:
                            <b>@digressionO.Km</b>
                        </td>
                        <td>
                            Метр:
                            <b>@digressionO.Mtr</b>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Отступление:
                            <b>@digressionO.Otst</b>
                        </td>
                        <td>
                            Сторона:
                            <b>@digressionO.Threat_id</b>
                        </td>
                        <td>
                            Скрепление:
                            <b>@digressionO.Fastening</b>
                        </td>
                    </tr>
                </table>
            </div>
        }

        @if (AppData.ShowPerShpals)
        {
            <div align="center">
                <table style="font-size: 16px; font-family: 'Times New Roman'; width: 100%; margin: auto;margin-bottom:8px;border-collapse: collapse">
                    <tr>
                        <td align="left">@digressionO.Pdb_section</td>
                        <td align="left">@digressionO.Fragment</td>
                        <td>
                            Дата проверки:
                            <b>@digressionO.Date</b>
                        </td>
                        <td>Проверка: Дополнительная</td>

                    </tr>
                    <tr>
                        <td>
                            Путь:
                            <b>@digressionO.Put</b>
                        </td>
                        <td>
                            Км:
                            <b>@digressionO.Km</b>
                        </td>
                        <td>
                            Метр:
                            <b>@digressionO.Meter</b>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Угол:
                            <b>@digressionO.Angle</b>
                        </td>
                        <td>
                            Скрепление:
                            <b>@digressionO.Fastener</b>
                        </td>
                        <td></td>
                    </tr>
                </table>
            </div>
        }

        @if (AppData.ShowDefShpals)
        {
            <div align="center">
                <table style="font-size: 16px; font-family: 'Times New Roman'; width: 100%; margin: auto;margin-bottom:8px;border-collapse: collapse">
                    <tr>
                        <td align="left">@digressionO.Pdb_section</td>
                        <td align="left">@digressionO.Fragment</td>
                        <td>
                            Дата проверки:
                            <b>@digressionO.Date</b>
                        </td>
                        <td>Проверка: Дополнительная</td>

                    </tr>
                    <tr>
                        <td>
                            Путь:
                            <b>@digressionO.Put</b>
                        </td>
                        <td>
                            Км:
                            <b>@digressionO.Km</b>
                        </td>
                        <td>
                            Метр:
                            <b>@digressionO.Meter</b>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Отступление:
                            <b>@digressionO.Otst</b>
                        </td>
                        <td>
                            Скрепление:
                            <b>@digressionO.Fastening</b>
                        </td>
                        <td>
                            Мероприятие:
                            <b>@digressionO.Meropr</b>
                        </td>
                    </tr>
                </table>
            </div>
        }

        <div id="imgdiv1" class="w-100" style="max-width: 100%;background: #1a1a1a;">
            <img id="dig-image" src="" class="w-100" style="visibility:hidden;max-width:100%" />
            <canvas id="dig-canvas"></canvas>
        </div>
        <MatButton Raised="true" OnClick="() => PrevDigression()">Предыдущий</MatButton>
        <MatButton Raised="true" Class="float-right" OnClick="() => NextDigression()">Следующий</MatButton>
    </MatDialogContent>
    <MatDialogActions>
        @*<MatButton Raised="true" OnClick="_=> { DigressionImageDialog = false;}">Редактировать</MatButton>*@

        @*@if (AppData.ShowGaps)
            {
                <MatButton Raised="true" OnClick="() => UpdateGapAsync(digressionGap)" Style="margin-right: .5rem">Сохранить</MatButton>
            }*@
        <MatButton Raised="true" OnClick="_=> { DigressionImageDialog = false;}">Закрыть</MatButton>
    </MatDialogActions>
</MatDialog>