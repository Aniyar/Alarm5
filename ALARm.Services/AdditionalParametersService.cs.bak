using System;
using System.Collections.Generic;
using ALARm.Core;
using ALARm.Core.AdditionalParameteres;
using ALARm.DataAccess;
using Autofac;
using IContainer = Autofac.IContainer;

namespace ALARm.Services
{
    public class AdditionalParametersService
    {
        static readonly IContainer Container;
        static AdditionalParametersService()
        {
            var builder = new ContainerBuilder();
            builder.RegisterType<AdditionalParametersRepository>().As<IAdditionalParametersRepository>();
            Container = builder.Build();
        }

        public static List<Gap> GetGaps(long process_id, int direction, int kilometer)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetGaps(process_id, direction, kilometer);
        }

        public static List<int> GetKilometers(long process_id, int direction)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetKilometers(process_id, direction);
        }

        public static CrossRailProfile GetCrossRailProfileFromText(int kilometer)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetCrossRailProfileFromText(kilometer);
        }

        public static ShortRoughness GetShortRoughnessFromText(int kilometer)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetShortRoughnessFromText(kilometer);
        }
        public static List<RailFastener> GetRailFasteners(long tripId, int kilometer)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetRailFasteners(tripId,kilometer);
        }

		public static List<Gap> DirectName(Int64 process_id, int direction)
        {
            return Container.Resolve<IAdditionalParametersRepository>().DirectName(process_id, direction);
        }
        public static List<Gap> GetGap(Int64 process_id, int direction)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetGap(process_id, direction);
        }
		public static List<Gap> GetFusGap(long process_id, int direction)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetFusGap(process_id, direction);
        }

        public static List<int> GetKilometersByTripId(Int64 process_id)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetKilometersByTripId(process_id);
        }
		public static List<int> GetKilometersByTripId(long process_id, long trackId)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetKilometersByTripId(process_id, trackId);
        }

        public static CrossRailProfile vertIznos(int nkm)
        {
            return Container.Resolve<IAdditionalParametersRepository>().vertIznos(nkm);
        }
        public static List<Gap> GetMaech(Int64 process_id, int direction)
        {
            return Container.Resolve<IAdditionalParametersRepository>().GetMaech(process_id, direction);
        }

    }
}
