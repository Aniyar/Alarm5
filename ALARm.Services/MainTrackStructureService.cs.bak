using ALARm.Core;
using ALARm.DataAccess;
using Autofac;
using System;
using System.Collections.Generic;

namespace ALARm.Services
{
    public class MainTrackStructureService
    {
        static readonly IContainer Container;
        public static IMainTrackStructureRepository GetRepository()
        {
            return new MainTrackStructureRepository();
        }
        static MainTrackStructureService()
        {
            var builder = new ContainerBuilder();
            builder.RegisterType<MainTrackStructureRepository>().As<IMainTrackStructureRepository>();
            Container = builder.Build();
        }

        public static bool DeletePeriod(Int64 periodId)
        {
            return Container.Resolve<IMainTrackStructureRepository>().DeletePeriod(periodId);
        }

        public static bool UpdatePeriod(Period period)
        {
            return Container.Resolve<IMainTrackStructureRepository>().UpdatePeriod(period);
        }

        public static List<Period> GetPeriods(Int64 trackId, int mtoType)
        {
            return (Container.Resolve<IMainTrackStructureRepository>().GetPeriods(trackId, mtoType));
        }

        public static List<Catalog> GetCatalog(int mtoType)
        {
            return (Container.Resolve<IMainTrackStructureRepository>().GetCatalog(mtoType));
        }

        public static object GetMtoObjectsByCoord(DateTime travelDate, int kilometrNumber, int motObjectType, string direction, string trackNumber)
        {
            return (Container.Resolve<IMainTrackStructureRepository>().GetMtoObjectsByCoord(travelDate, kilometrNumber, motObjectType, direction, trackNumber));
        }

        public static object GetMtoObjectsByCoord(DateTime travelDate, int kilometrNumber, int motObjectType, long direction_id, string trackNumber, int meter = -1)
        {
            return (Container.Resolve<IMainTrackStructureRepository>().GetMtoObjectsByCoord(travelDate, kilometrNumber, motObjectType, direction_id, trackNumber, meter));
        }
        public static object GetCurves(Int64 parentId, int type)
        {
            return (Container.Resolve<IMainTrackStructureRepository>().GetCurves(parentId,type));
        }

        public static Period InsertPeriod(Period period)
        {
            period.Id =  Container.Resolve<IMainTrackStructureRepository>().InsertPeriod(period);
            return period;
        }

        public static MainTrackObject InsertObject(MainTrackObject section, int motObjectType)
        {
            section.Id = Container.Resolve<IMainTrackStructureRepository>().InsertObject(section, motObjectType);
            return section;
        }

		public static object GetMtoObject(long mtoObjectId, int mtoObjectType)
        {
            return (Container.Resolve<IMainTrackStructureRepository>().GetMtoObject(mtoObjectId, mtoObjectType));
        }
        public static object GetMtoObjects(Int64 periodId, int mtoObjectType)
        {
            return (Container.Resolve<IMainTrackStructureRepository>().GetMtoObjects(periodId, mtoObjectType));
        }

        public static bool DeleteMtoObject(Int64 id, int mtoObjectType)
        {
            return Container.Resolve<IMainTrackStructureRepository>().DeleteMtoObject(id, mtoObjectType);
        }

        public static bool UpdateMtoObject(MainTrackObject section, int mtoObjectType)
        {
            return Container.Resolve<IMainTrackStructureRepository>().UpdateMtoObject(section, mtoObjectType);
        }

        public static object GetPeriods(Int64 trackId, object mtoNonStandard)
        {
            throw new NotImplementedException();
        }

		public static object Diam(int km, int meter)
        {
            return Container.Resolve<IMainTrackStructureRepository>().Hole_diam(km, meter);
        }
        public static bool GenerateDirectionList(string direction, Int64 trackID, string dirName, DateTime dirListDate)
        {
            return Container.Resolve<IMainTrackStructureRepository>().GenerateDirectionList(direction, trackID, dirName, dirListDate);
        }

       

        public static string GetModificationDate()
        {
            return Container.Resolve<IMainTrackStructureRepository>().GetModificationDate();
        }

        public static object GetKMs(DateTime processDateTime, int mtoObjectType, Int64 curveId)
        {
            return Container.Resolve<IMainTrackStructureRepository>().GetKMs(processDateTime, mtoObjectType, curveId);
        }

        public static List<RDCurve> GetRDCurves(Int64 curveId, Int64 mainProcessId)
        {
            return Container.Resolve<IMainTrackStructureRepository>().GetRDCurves(curveId, mainProcessId);
        }

        public static NonstandardKm GetNonStandardKm(Int64 id, int mtoObject, int nkm)
        {
            return Container.Resolve<IMainTrackStructureRepository>().GetNonStandardKm(id, mtoObject, nkm);
        }

        public static List<RepairProject> GetAcceptRepairProject(Int64 trackId)
        {
            return Container.Resolve<IMainTrackStructureRepository>().GetAcceptRepairProject(trackId);
        }

        public static bool SetAcceptRepairProject(Int64 trackId)
        {
            return Container.Resolve<IMainTrackStructureRepository>().SetAcceptRepairProject(trackId);
        }
        public static object GetMtoObjectsByCoord(DateTime date, int nkm, int mtoObjectType, long track_id, int meter = -1)
        { 
            return Container.Resolve<IMainTrackStructureRepository>().GetMtoObjectsByCoord(date, nkm, mtoObjectType, track_id);
        }
        public static string GetSector(long track_id, int nkm, DateTime trip_date)
        {
            return Container.Resolve<IMainTrackStructureRepository>().GetSector(track_id, nkm, trip_date);
        }
    }
}
